# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ValidationDiagnostics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'info': 'int',
        'debug': 'int',
        'warning': 'int',
        'error': 'int',
        'fatal': 'int'
    }

    attribute_map = {
        'info': 'info',
        'debug': 'debug',
        'warning': 'warning',
        'error': 'error',
        'fatal': 'fatal'
    }

    def __init__(self, info=None, debug=None, warning=None, error=None, fatal=None):  # noqa: E501
        """ValidationDiagnostics - a model defined in OpenAPI"""  # noqa: E501

        self._info = None
        self._debug = None
        self._warning = None
        self._error = None
        self._fatal = None
        self.discriminator = None

        self.info = info
        self.debug = debug
        self.warning = warning
        self.error = error
        self.fatal = fatal

    @property
    def info(self):
        """Gets the info of this ValidationDiagnostics.  # noqa: E501


        :return: The info of this ValidationDiagnostics.  # noqa: E501
        :rtype: int
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ValidationDiagnostics.


        :param info: The info of this ValidationDiagnostics.  # noqa: E501
        :type: int
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def debug(self):
        """Gets the debug of this ValidationDiagnostics.  # noqa: E501


        :return: The debug of this ValidationDiagnostics.  # noqa: E501
        :rtype: int
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this ValidationDiagnostics.


        :param debug: The debug of this ValidationDiagnostics.  # noqa: E501
        :type: int
        """
        if debug is None:
            raise ValueError("Invalid value for `debug`, must not be `None`")  # noqa: E501

        self._debug = debug

    @property
    def warning(self):
        """Gets the warning of this ValidationDiagnostics.  # noqa: E501


        :return: The warning of this ValidationDiagnostics.  # noqa: E501
        :rtype: int
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this ValidationDiagnostics.


        :param warning: The warning of this ValidationDiagnostics.  # noqa: E501
        :type: int
        """
        if warning is None:
            raise ValueError("Invalid value for `warning`, must not be `None`")  # noqa: E501

        self._warning = warning

    @property
    def error(self):
        """Gets the error of this ValidationDiagnostics.  # noqa: E501


        :return: The error of this ValidationDiagnostics.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ValidationDiagnostics.


        :param error: The error of this ValidationDiagnostics.  # noqa: E501
        :type: int
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def fatal(self):
        """Gets the fatal of this ValidationDiagnostics.  # noqa: E501


        :return: The fatal of this ValidationDiagnostics.  # noqa: E501
        :rtype: int
        """
        return self._fatal

    @fatal.setter
    def fatal(self, fatal):
        """Sets the fatal of this ValidationDiagnostics.


        :param fatal: The fatal of this ValidationDiagnostics.  # noqa: E501
        :type: int
        """
        if fatal is None:
            raise ValueError("Invalid value for `fatal`, must not be `None`")  # noqa: E501

        self._fatal = fatal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationDiagnostics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
