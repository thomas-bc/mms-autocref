# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ServerStatusMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'concurrent_client_connections': 'int',
        'concurrent_indexing_tasks': 'int',
        'concurrent_persisting_tasks': 'int',
        'concurrent_load_back_tasks': 'int',
        'concurrent_query_executions': 'int',
        'concurrent_validation_tasks': 'int',
        'concurrent_impact_analysis_tasks': 'int',
        'server_exceptions': 'list[str]'
    }

    attribute_map = {
        'concurrent_client_connections': 'concurrentClientConnections',
        'concurrent_indexing_tasks': 'concurrentIndexingTasks',
        'concurrent_persisting_tasks': 'concurrentPersistingTasks',
        'concurrent_load_back_tasks': 'concurrentLoadBackTasks',
        'concurrent_query_executions': 'concurrentQueryExecutions',
        'concurrent_validation_tasks': 'concurrentValidationTasks',
        'concurrent_impact_analysis_tasks': 'concurrentImpactAnalysisTasks',
        'server_exceptions': 'serverExceptions'
    }

    def __init__(self, concurrent_client_connections=None, concurrent_indexing_tasks=None, concurrent_persisting_tasks=None, concurrent_load_back_tasks=None, concurrent_query_executions=None, concurrent_validation_tasks=None, concurrent_impact_analysis_tasks=None, server_exceptions=None):  # noqa: E501
        """ServerStatusMessage - a model defined in OpenAPI"""  # noqa: E501

        self._concurrent_client_connections = None
        self._concurrent_indexing_tasks = None
        self._concurrent_persisting_tasks = None
        self._concurrent_load_back_tasks = None
        self._concurrent_query_executions = None
        self._concurrent_validation_tasks = None
        self._concurrent_impact_analysis_tasks = None
        self._server_exceptions = None
        self.discriminator = None

        self.concurrent_client_connections = concurrent_client_connections
        self.concurrent_indexing_tasks = concurrent_indexing_tasks
        self.concurrent_persisting_tasks = concurrent_persisting_tasks
        self.concurrent_load_back_tasks = concurrent_load_back_tasks
        self.concurrent_query_executions = concurrent_query_executions
        self.concurrent_validation_tasks = concurrent_validation_tasks
        self.concurrent_impact_analysis_tasks = concurrent_impact_analysis_tasks
        if server_exceptions is not None:
            self.server_exceptions = server_exceptions

    @property
    def concurrent_client_connections(self):
        """Gets the concurrent_client_connections of this ServerStatusMessage.  # noqa: E501


        :return: The concurrent_client_connections of this ServerStatusMessage.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_client_connections

    @concurrent_client_connections.setter
    def concurrent_client_connections(self, concurrent_client_connections):
        """Sets the concurrent_client_connections of this ServerStatusMessage.


        :param concurrent_client_connections: The concurrent_client_connections of this ServerStatusMessage.  # noqa: E501
        :type: int
        """
        if concurrent_client_connections is None:
            raise ValueError("Invalid value for `concurrent_client_connections`, must not be `None`")  # noqa: E501

        self._concurrent_client_connections = concurrent_client_connections

    @property
    def concurrent_indexing_tasks(self):
        """Gets the concurrent_indexing_tasks of this ServerStatusMessage.  # noqa: E501


        :return: The concurrent_indexing_tasks of this ServerStatusMessage.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_indexing_tasks

    @concurrent_indexing_tasks.setter
    def concurrent_indexing_tasks(self, concurrent_indexing_tasks):
        """Sets the concurrent_indexing_tasks of this ServerStatusMessage.


        :param concurrent_indexing_tasks: The concurrent_indexing_tasks of this ServerStatusMessage.  # noqa: E501
        :type: int
        """
        if concurrent_indexing_tasks is None:
            raise ValueError("Invalid value for `concurrent_indexing_tasks`, must not be `None`")  # noqa: E501

        self._concurrent_indexing_tasks = concurrent_indexing_tasks

    @property
    def concurrent_persisting_tasks(self):
        """Gets the concurrent_persisting_tasks of this ServerStatusMessage.  # noqa: E501


        :return: The concurrent_persisting_tasks of this ServerStatusMessage.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_persisting_tasks

    @concurrent_persisting_tasks.setter
    def concurrent_persisting_tasks(self, concurrent_persisting_tasks):
        """Sets the concurrent_persisting_tasks of this ServerStatusMessage.


        :param concurrent_persisting_tasks: The concurrent_persisting_tasks of this ServerStatusMessage.  # noqa: E501
        :type: int
        """
        if concurrent_persisting_tasks is None:
            raise ValueError("Invalid value for `concurrent_persisting_tasks`, must not be `None`")  # noqa: E501

        self._concurrent_persisting_tasks = concurrent_persisting_tasks

    @property
    def concurrent_load_back_tasks(self):
        """Gets the concurrent_load_back_tasks of this ServerStatusMessage.  # noqa: E501


        :return: The concurrent_load_back_tasks of this ServerStatusMessage.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_load_back_tasks

    @concurrent_load_back_tasks.setter
    def concurrent_load_back_tasks(self, concurrent_load_back_tasks):
        """Sets the concurrent_load_back_tasks of this ServerStatusMessage.


        :param concurrent_load_back_tasks: The concurrent_load_back_tasks of this ServerStatusMessage.  # noqa: E501
        :type: int
        """
        if concurrent_load_back_tasks is None:
            raise ValueError("Invalid value for `concurrent_load_back_tasks`, must not be `None`")  # noqa: E501

        self._concurrent_load_back_tasks = concurrent_load_back_tasks

    @property
    def concurrent_query_executions(self):
        """Gets the concurrent_query_executions of this ServerStatusMessage.  # noqa: E501


        :return: The concurrent_query_executions of this ServerStatusMessage.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_query_executions

    @concurrent_query_executions.setter
    def concurrent_query_executions(self, concurrent_query_executions):
        """Sets the concurrent_query_executions of this ServerStatusMessage.


        :param concurrent_query_executions: The concurrent_query_executions of this ServerStatusMessage.  # noqa: E501
        :type: int
        """
        if concurrent_query_executions is None:
            raise ValueError("Invalid value for `concurrent_query_executions`, must not be `None`")  # noqa: E501

        self._concurrent_query_executions = concurrent_query_executions

    @property
    def concurrent_validation_tasks(self):
        """Gets the concurrent_validation_tasks of this ServerStatusMessage.  # noqa: E501


        :return: The concurrent_validation_tasks of this ServerStatusMessage.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_validation_tasks

    @concurrent_validation_tasks.setter
    def concurrent_validation_tasks(self, concurrent_validation_tasks):
        """Sets the concurrent_validation_tasks of this ServerStatusMessage.


        :param concurrent_validation_tasks: The concurrent_validation_tasks of this ServerStatusMessage.  # noqa: E501
        :type: int
        """
        if concurrent_validation_tasks is None:
            raise ValueError("Invalid value for `concurrent_validation_tasks`, must not be `None`")  # noqa: E501

        self._concurrent_validation_tasks = concurrent_validation_tasks

    @property
    def concurrent_impact_analysis_tasks(self):
        """Gets the concurrent_impact_analysis_tasks of this ServerStatusMessage.  # noqa: E501


        :return: The concurrent_impact_analysis_tasks of this ServerStatusMessage.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_impact_analysis_tasks

    @concurrent_impact_analysis_tasks.setter
    def concurrent_impact_analysis_tasks(self, concurrent_impact_analysis_tasks):
        """Sets the concurrent_impact_analysis_tasks of this ServerStatusMessage.


        :param concurrent_impact_analysis_tasks: The concurrent_impact_analysis_tasks of this ServerStatusMessage.  # noqa: E501
        :type: int
        """
        if concurrent_impact_analysis_tasks is None:
            raise ValueError("Invalid value for `concurrent_impact_analysis_tasks`, must not be `None`")  # noqa: E501

        self._concurrent_impact_analysis_tasks = concurrent_impact_analysis_tasks

    @property
    def server_exceptions(self):
        """Gets the server_exceptions of this ServerStatusMessage.  # noqa: E501


        :return: The server_exceptions of this ServerStatusMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_exceptions

    @server_exceptions.setter
    def server_exceptions(self, server_exceptions):
        """Sets the server_exceptions of this ServerStatusMessage.


        :param server_exceptions: The server_exceptions of this ServerStatusMessage.  # noqa: E501
        :type: list[str]
        """

        self._server_exceptions = server_exceptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerStatusMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
