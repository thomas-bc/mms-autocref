# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ListDependentElementsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'result_size': 'int',
        'resource_statics': 'ImpactAnalysisResourceStatistics',
        'workspaces': 'object'
    }

    attribute_map = {
        'result_size': 'resultSize',
        'resource_statics': 'resourceStatics',
        'workspaces': 'workspaces'
    }

    def __init__(self, result_size=None, resource_statics=None, workspaces=None):  # noqa: E501
        """ListDependentElementsResponse - a model defined in OpenAPI"""  # noqa: E501

        self._result_size = None
        self._resource_statics = None
        self._workspaces = None
        self.discriminator = None

        self.result_size = result_size
        if resource_statics is not None:
            self.resource_statics = resource_statics
        self.workspaces = workspaces

    @property
    def result_size(self):
        """Gets the result_size of this ListDependentElementsResponse.  # noqa: E501


        :return: The result_size of this ListDependentElementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._result_size

    @result_size.setter
    def result_size(self, result_size):
        """Sets the result_size of this ListDependentElementsResponse.


        :param result_size: The result_size of this ListDependentElementsResponse.  # noqa: E501
        :type: int
        """
        if result_size is None:
            raise ValueError("Invalid value for `result_size`, must not be `None`")  # noqa: E501

        self._result_size = result_size

    @property
    def resource_statics(self):
        """Gets the resource_statics of this ListDependentElementsResponse.  # noqa: E501


        :return: The resource_statics of this ListDependentElementsResponse.  # noqa: E501
        :rtype: ImpactAnalysisResourceStatistics
        """
        return self._resource_statics

    @resource_statics.setter
    def resource_statics(self, resource_statics):
        """Sets the resource_statics of this ListDependentElementsResponse.


        :param resource_statics: The resource_statics of this ListDependentElementsResponse.  # noqa: E501
        :type: ImpactAnalysisResourceStatistics
        """

        self._resource_statics = resource_statics

    @property
    def workspaces(self):
        """Gets the workspaces of this ListDependentElementsResponse.  # noqa: E501


        :return: The workspaces of this ListDependentElementsResponse.  # noqa: E501
        :rtype: object
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this ListDependentElementsResponse.


        :param workspaces: The workspaces of this ListDependentElementsResponse.  # noqa: E501
        :type: object
        """
        if workspaces is None:
            raise ValueError("Invalid value for `workspaces`, must not be `None`")  # noqa: E501

        self._workspaces = workspaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListDependentElementsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
