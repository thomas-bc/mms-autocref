# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DependentElementInRevision(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'revision_number': 'int',
        'references': 'list[DependentElementDescriptor]'
    }

    attribute_map = {
        'revision_number': 'revisionNumber',
        'references': 'references'
    }

    def __init__(self, revision_number=None, references=None):  # noqa: E501
        """DependentElementInRevision - a model defined in OpenAPI"""  # noqa: E501

        self._revision_number = None
        self._references = None
        self.discriminator = None

        self.revision_number = revision_number
        self.references = references

    @property
    def revision_number(self):
        """Gets the revision_number of this DependentElementInRevision.  # noqa: E501


        :return: The revision_number of this DependentElementInRevision.  # noqa: E501
        :rtype: int
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this DependentElementInRevision.


        :param revision_number: The revision_number of this DependentElementInRevision.  # noqa: E501
        :type: int
        """
        if revision_number is None:
            raise ValueError("Invalid value for `revision_number`, must not be `None`")  # noqa: E501

        self._revision_number = revision_number

    @property
    def references(self):
        """Gets the references of this DependentElementInRevision.  # noqa: E501


        :return: The references of this DependentElementInRevision.  # noqa: E501
        :rtype: list[DependentElementDescriptor]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this DependentElementInRevision.


        :param references: The references of this DependentElementInRevision.  # noqa: E501
        :type: list[DependentElementDescriptor]
        """
        if references is None:
            raise ValueError("Invalid value for `references`, must not be `None`")  # noqa: E501

        self._references = references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DependentElementInRevision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
