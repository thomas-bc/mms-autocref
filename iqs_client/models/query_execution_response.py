# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class QueryExecutionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_fqn': 'str',
        'binding': 'list[Argument]',
        'match_set_size': 'int',
        'matches': 'list[Match]'
    }

    attribute_map = {
        'query_fqn': 'queryFQN',
        'binding': 'binding',
        'match_set_size': 'matchSetSize',
        'matches': 'matches'
    }

    def __init__(self, query_fqn=None, binding=None, match_set_size=None, matches=None):  # noqa: E501
        """QueryExecutionResponse - a model defined in OpenAPI"""  # noqa: E501

        self._query_fqn = None
        self._binding = None
        self._match_set_size = None
        self._matches = None
        self.discriminator = None

        self.query_fqn = query_fqn
        self.binding = binding
        self.match_set_size = match_set_size
        self.matches = matches

    @property
    def query_fqn(self):
        """Gets the query_fqn of this QueryExecutionResponse.  # noqa: E501


        :return: The query_fqn of this QueryExecutionResponse.  # noqa: E501
        :rtype: str
        """
        return self._query_fqn

    @query_fqn.setter
    def query_fqn(self, query_fqn):
        """Sets the query_fqn of this QueryExecutionResponse.


        :param query_fqn: The query_fqn of this QueryExecutionResponse.  # noqa: E501
        :type: str
        """
        if query_fqn is None:
            raise ValueError("Invalid value for `query_fqn`, must not be `None`")  # noqa: E501

        self._query_fqn = query_fqn

    @property
    def binding(self):
        """Gets the binding of this QueryExecutionResponse.  # noqa: E501


        :return: The binding of this QueryExecutionResponse.  # noqa: E501
        :rtype: list[Argument]
        """
        return self._binding

    @binding.setter
    def binding(self, binding):
        """Sets the binding of this QueryExecutionResponse.


        :param binding: The binding of this QueryExecutionResponse.  # noqa: E501
        :type: list[Argument]
        """
        if binding is None:
            raise ValueError("Invalid value for `binding`, must not be `None`")  # noqa: E501

        self._binding = binding

    @property
    def match_set_size(self):
        """Gets the match_set_size of this QueryExecutionResponse.  # noqa: E501


        :return: The match_set_size of this QueryExecutionResponse.  # noqa: E501
        :rtype: int
        """
        return self._match_set_size

    @match_set_size.setter
    def match_set_size(self, match_set_size):
        """Sets the match_set_size of this QueryExecutionResponse.


        :param match_set_size: The match_set_size of this QueryExecutionResponse.  # noqa: E501
        :type: int
        """
        if match_set_size is None:
            raise ValueError("Invalid value for `match_set_size`, must not be `None`")  # noqa: E501

        self._match_set_size = match_set_size

    @property
    def matches(self):
        """Gets the matches of this QueryExecutionResponse.  # noqa: E501


        :return: The matches of this QueryExecutionResponse.  # noqa: E501
        :rtype: list[Match]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this QueryExecutionResponse.


        :param matches: The matches of this QueryExecutionResponse.  # noqa: E501
        :type: list[Match]
        """
        if matches is None:
            raise ValueError("Invalid value for `matches`, must not be `None`")  # noqa: E501

        self._matches = matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryExecutionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
