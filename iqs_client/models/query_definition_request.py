# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class QueryDefinitionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'package_name': 'str',
        'query_language': 'QueryLanguage',
        'query_definitions': 'list[str]'
    }

    attribute_map = {
        'package_name': 'packageName',
        'query_language': 'queryLanguage',
        'query_definitions': 'queryDefinitions'
    }

    def __init__(self, package_name=None, query_language=None, query_definitions=None):  # noqa: E501
        """QueryDefinitionRequest - a model defined in OpenAPI"""  # noqa: E501

        self._package_name = None
        self._query_language = None
        self._query_definitions = None
        self.discriminator = None

        self.package_name = package_name
        self.query_language = query_language
        self.query_definitions = query_definitions

    @property
    def package_name(self):
        """Gets the package_name of this QueryDefinitionRequest.  # noqa: E501

        Optional query package for organizing queries and controlling visibility.  The value must be a legal Java package name: * start with lowercase letter * contain only lowercase letters, digits and dots ('.') * cannot end with dot ('.')   # noqa: E501

        :return: The package_name of this QueryDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this QueryDefinitionRequest.

        Optional query package for organizing queries and controlling visibility.  The value must be a legal Java package name: * start with lowercase letter * contain only lowercase letters, digits and dots ('.') * cannot end with dot ('.')   # noqa: E501

        :param package_name: The package_name of this QueryDefinitionRequest.  # noqa: E501
        :type: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501

        self._package_name = package_name

    @property
    def query_language(self):
        """Gets the query_language of this QueryDefinitionRequest.  # noqa: E501


        :return: The query_language of this QueryDefinitionRequest.  # noqa: E501
        :rtype: QueryLanguage
        """
        return self._query_language

    @query_language.setter
    def query_language(self, query_language):
        """Sets the query_language of this QueryDefinitionRequest.


        :param query_language: The query_language of this QueryDefinitionRequest.  # noqa: E501
        :type: QueryLanguage
        """
        if query_language is None:
            raise ValueError("Invalid value for `query_language`, must not be `None`")  # noqa: E501

        self._query_language = query_language

    @property
    def query_definitions(self):
        """Gets the query_definitions of this QueryDefinitionRequest.  # noqa: E501


        :return: The query_definitions of this QueryDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_definitions

    @query_definitions.setter
    def query_definitions(self, query_definitions):
        """Sets the query_definitions of this QueryDefinitionRequest.


        :param query_definitions: The query_definitions of this QueryDefinitionRequest.  # noqa: E501
        :type: list[str]
        """
        if query_definitions is None:
            raise ValueError("Invalid value for `query_definitions`, must not be `None`")  # noqa: E501

        self._query_definitions = query_definitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryDefinitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
