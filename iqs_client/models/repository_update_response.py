# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RepositoryUpdateResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'repository_changed': 'bool',
        'number_of_new_compartments': 'int',
        'new_model_compartments': 'list[str]'
    }

    attribute_map = {
        'repository_changed': 'repositoryChanged',
        'number_of_new_compartments': 'numberOfNewCompartments',
        'new_model_compartments': 'newModelCompartments'
    }

    def __init__(self, repository_changed=None, number_of_new_compartments=None, new_model_compartments=None):  # noqa: E501
        """RepositoryUpdateResponse - a model defined in OpenAPI"""  # noqa: E501

        self._repository_changed = None
        self._number_of_new_compartments = None
        self._new_model_compartments = None
        self.discriminator = None

        self.repository_changed = repository_changed
        if number_of_new_compartments is not None:
            self.number_of_new_compartments = number_of_new_compartments
        if new_model_compartments is not None:
            self.new_model_compartments = new_model_compartments

    @property
    def repository_changed(self):
        """Gets the repository_changed of this RepositoryUpdateResponse.  # noqa: E501


        :return: The repository_changed of this RepositoryUpdateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._repository_changed

    @repository_changed.setter
    def repository_changed(self, repository_changed):
        """Sets the repository_changed of this RepositoryUpdateResponse.


        :param repository_changed: The repository_changed of this RepositoryUpdateResponse.  # noqa: E501
        :type: bool
        """
        if repository_changed is None:
            raise ValueError("Invalid value for `repository_changed`, must not be `None`")  # noqa: E501

        self._repository_changed = repository_changed

    @property
    def number_of_new_compartments(self):
        """Gets the number_of_new_compartments of this RepositoryUpdateResponse.  # noqa: E501


        :return: The number_of_new_compartments of this RepositoryUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_new_compartments

    @number_of_new_compartments.setter
    def number_of_new_compartments(self, number_of_new_compartments):
        """Sets the number_of_new_compartments of this RepositoryUpdateResponse.


        :param number_of_new_compartments: The number_of_new_compartments of this RepositoryUpdateResponse.  # noqa: E501
        :type: int
        """

        self._number_of_new_compartments = number_of_new_compartments

    @property
    def new_model_compartments(self):
        """Gets the new_model_compartments of this RepositoryUpdateResponse.  # noqa: E501

        List of model compartments URIs   # noqa: E501

        :return: The new_model_compartments of this RepositoryUpdateResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_model_compartments

    @new_model_compartments.setter
    def new_model_compartments(self, new_model_compartments):
        """Sets the new_model_compartments of this RepositoryUpdateResponse.

        List of model compartments URIs   # noqa: E501

        :param new_model_compartments: The new_model_compartments of this RepositoryUpdateResponse.  # noqa: E501
        :type: list[str]
        """

        self._new_model_compartments = new_model_compartments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
