# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class QueryFQNListWithModelCompartment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_compartment': 'ModelCompartment',
        'query_fq_ns': 'list[str]'
    }

    attribute_map = {
        'model_compartment': 'modelCompartment',
        'query_fq_ns': 'queryFQNs'
    }

    def __init__(self, model_compartment=None, query_fq_ns=None):  # noqa: E501
        """QueryFQNListWithModelCompartment - a model defined in OpenAPI"""  # noqa: E501

        self._model_compartment = None
        self._query_fq_ns = None
        self.discriminator = None

        self.model_compartment = model_compartment
        self.query_fq_ns = query_fq_ns

    @property
    def model_compartment(self):
        """Gets the model_compartment of this QueryFQNListWithModelCompartment.  # noqa: E501


        :return: The model_compartment of this QueryFQNListWithModelCompartment.  # noqa: E501
        :rtype: ModelCompartment
        """
        return self._model_compartment

    @model_compartment.setter
    def model_compartment(self, model_compartment):
        """Sets the model_compartment of this QueryFQNListWithModelCompartment.


        :param model_compartment: The model_compartment of this QueryFQNListWithModelCompartment.  # noqa: E501
        :type: ModelCompartment
        """
        if model_compartment is None:
            raise ValueError("Invalid value for `model_compartment`, must not be `None`")  # noqa: E501

        self._model_compartment = model_compartment

    @property
    def query_fq_ns(self):
        """Gets the query_fq_ns of this QueryFQNListWithModelCompartment.  # noqa: E501


        :return: The query_fq_ns of this QueryFQNListWithModelCompartment.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_fq_ns

    @query_fq_ns.setter
    def query_fq_ns(self, query_fq_ns):
        """Sets the query_fq_ns of this QueryFQNListWithModelCompartment.


        :param query_fq_ns: The query_fq_ns of this QueryFQNListWithModelCompartment.  # noqa: E501
        :type: list[str]
        """
        if query_fq_ns is None:
            raise ValueError("Invalid value for `query_fq_ns`, must not be `None`")  # noqa: E501

        self._query_fq_ns = query_fq_ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryFQNListWithModelCompartment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
