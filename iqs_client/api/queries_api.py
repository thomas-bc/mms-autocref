# coding: utf-8

"""
    IncQuery Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.12.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from iqs_client.api_client import ApiClient


class QueriesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_query_details(self, query_fqn, **kwargs):  # noqa: E501
        """Retrieve detailed information for a query specification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_query_details(query_fqn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_fqn: Fully qualified name of the query (package name and query name separated with a dot)  (required)
        :return: QuerySpecificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_query_details_with_http_info(query_fqn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_query_details_with_http_info(query_fqn, **kwargs)  # noqa: E501
            return data

    def get_query_details_with_http_info(self, query_fqn, **kwargs):  # noqa: E501
        """Retrieve detailed information for a query specification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_query_details_with_http_info(query_fqn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_fqn: Fully qualified name of the query (package name and query name separated with a dot)  (required)
        :return: QuerySpecificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query_fqn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_query_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query_fqn' is set
        if ('query_fqn' not in local_var_params or
                local_var_params['query_fqn'] is None):
            raise ValueError("Missing the required parameter `query_fqn` when calling `get_query_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query_fqn' in local_var_params:
            query_params.append(('queryFQN', local_var_params['query_fqn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/queries.details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuerySpecificationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_queries(self, **kwargs):  # noqa: E501
        """List registered query specifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_queries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: QueryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_queries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_queries_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_queries_with_http_info(self, **kwargs):  # noqa: E501
        """List registered query specifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_queries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: QueryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_queries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/queries.list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_queries(self, query_definition_request, **kwargs):  # noqa: E501
        """Register query definitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_queries(query_definition_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryDefinitionRequest query_definition_request: (required)
        :return: QueryFQNList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_queries_with_http_info(query_definition_request, **kwargs)  # noqa: E501
        else:
            (data) = self.register_queries_with_http_info(query_definition_request, **kwargs)  # noqa: E501
            return data

    def register_queries_with_http_info(self, query_definition_request, **kwargs):  # noqa: E501
        """Register query definitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_queries_with_http_info(query_definition_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryDefinitionRequest query_definition_request: (required)
        :return: QueryFQNList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query_definition_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_queries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query_definition_request' is set
        if ('query_definition_request' not in local_var_params or
                local_var_params['query_definition_request'] is None):
            raise ValueError("Missing the required parameter `query_definition_request` when calling `register_queries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query_definition_request' in local_var_params:
            body_params = local_var_params['query_definition_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/queries.register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryFQNList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_queries_from_model_compartment(self, model_compartment, **kwargs):  # noqa: E501
        """Registers query definitions contained in model compartments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_queries_from_model_compartment(model_compartment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelCompartment model_compartment: Model compartment descriptor.  (required)
        :return: QueryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_queries_from_model_compartment_with_http_info(model_compartment, **kwargs)  # noqa: E501
        else:
            (data) = self.register_queries_from_model_compartment_with_http_info(model_compartment, **kwargs)  # noqa: E501
            return data

    def register_queries_from_model_compartment_with_http_info(self, model_compartment, **kwargs):  # noqa: E501
        """Registers query definitions contained in model compartments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_queries_from_model_compartment_with_http_info(model_compartment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelCompartment model_compartment: Model compartment descriptor.  (required)
        :return: QueryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['model_compartment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_queries_from_model_compartment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_compartment' is set
        if ('model_compartment' not in local_var_params or
                local_var_params['model_compartment'] is None):
            raise ValueError("Missing the required parameter `model_compartment` when calling `register_queries_from_model_compartment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model_compartment' in local_var_params:
            body_params = local_var_params['model_compartment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/queries.registerFromModelCompartment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_queries_plain_text(self, body, **kwargs):  # noqa: E501
        """Register query definitions in plain text format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_queries_plain_text(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Query definition in plain text  (required)
        :param str query_package: Optional query package for organizing queries and controlling visibility.  The value must be a legal Java package name: * start with lowercase letter * contain only lowercase letters, digits and dots ('.') * cannot end with dot ('.') 
        :param str query_language: Optional parameter for defining the query language. Default value is 'viatra'. Choose one of the followings: viatra, lucene 
        :return: QueryFQNList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_queries_plain_text_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_queries_plain_text_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_queries_plain_text_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register query definitions in plain text format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_queries_plain_text_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Query definition in plain text  (required)
        :param str query_package: Optional query package for organizing queries and controlling visibility.  The value must be a legal Java package name: * start with lowercase letter * contain only lowercase letters, digits and dots ('.') * cannot end with dot ('.') 
        :param str query_language: Optional parameter for defining the query language. Default value is 'viatra'. Choose one of the followings: viatra, lucene 
        :return: QueryFQNList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body', 'query_package', 'query_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_queries_plain_text" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_queries_plain_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query_package' in local_var_params:
            query_params.append(('queryPackage', local_var_params['query_package']))  # noqa: E501
        if 'query_language' in local_var_params:
            query_params.append(('queryLanguage', local_var_params['query_language']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/queries.registerPlainText', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryFQNList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unregister_all_queries(self, **kwargs):  # noqa: E501
        """Unregister all queries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_all_queries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SimpleMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unregister_all_queries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.unregister_all_queries_with_http_info(**kwargs)  # noqa: E501
            return data

    def unregister_all_queries_with_http_info(self, **kwargs):  # noqa: E501
        """Unregister all queries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_all_queries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SimpleMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unregister_all_queries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/queries.unregisterAll', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimpleMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
